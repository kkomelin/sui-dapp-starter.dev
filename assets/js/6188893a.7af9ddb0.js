"use strict";(self.webpackChunksui_dapp_starter_dev=self.webpackChunksui_dapp_starter_dev||[]).push([[161],{1348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=n(6070),o=n(6113);const r={sidebar_position:4},i="useNetworkType()",l={id:"frontend/hooks/usenetworktype",title:"useNetworkType()",description:"The useNetworkType() hook lets you determine which network is currently active in the user wallet.",source:"@site/docs/frontend/hooks/usenetworktype.md",sourceDirName:"frontend/hooks",slug:"/frontend/hooks/usenetworktype",permalink:"/docs/frontend/hooks/usenetworktype",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"useFaucet()",permalink:"/docs/frontend/hooks/usefaucet"},next:{title:"Deployment",permalink:"/docs/category/deployment"}},d={},c=[{value:"Usage",id:"usage",level:2},{value:"One-time request",id:"one-time-request",level:3},{value:"Refetch on demand",id:"refetch-on-demand",level:3},{value:"Regular update",id:"regular-update",level:3},{value:"Used in",id:"used-in",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"usenetworktype",children:"useNetworkType()"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useNetworkType()"})," hook lets you determine which network is currently active in the user wallet."]}),"\n",(0,s.jsx)(t.p,{children:"It's possible to request the network type once or on a regular basis."}),"\n",(0,s.jsx)(t.p,{children:"Please note the user wallet is the single point of truth and the only way to switch the network now is through wallet settings."}),"\n",(0,s.jsxs)(t.p,{children:["If a wallet is not connected, the network type will be ",(0,s.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.h3,{id:"one-time-request",children:"One-time request"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="MyComponent.tsx"',children:"const { networkType } = useNetworkType()\n// or\nconst { networkType } = useNetworkType({ \n  autoRefetch: false \n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"refetch-on-demand",children:"Refetch on demand"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="MyComponent.tsx"',children:"const { networkType, refetch } = useNetworkType()\nrefetch()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"regular-update",children:"Regular update"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="MyComponent.tsx"',children:"const { networkType } = useNetworkType({ \n  autoRefetch: true, \n  autoRefetchInterval: 3000 \n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Where ",(0,s.jsx)(t.code,{children:"autoRefetchInterval"})," is in milliseconds. Default value is 3000 milliseconds (3 seconds)."]}),"\n",(0,s.jsx)(t.h2,{id:"used-in",children:"Used in"}),"\n",(0,s.jsx)(t.p,{children:"<NetworkType />"})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},6113:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(758);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);